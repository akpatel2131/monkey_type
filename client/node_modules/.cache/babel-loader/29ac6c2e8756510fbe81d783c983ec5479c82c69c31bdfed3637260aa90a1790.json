{"ast":null,"code":"var _jsxFileName = \"/Users/krunal/Desktop/crio project/Fullstack/monkey-type/client/src/components/TypingTest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../context/AuthContext';\n\n// Sample paragraphs for testing\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst paragraphs = {\n  words: `Once upon a time, there was a little child who went to school every day. He loved his parents very much and always enjoyed playing with his friends. He also liked reading books and wanted to become a scientist when he grew up.`,\n  numbers: `In 2023, there were 5.9 billion mobile phone users worldwide. India has 1.4 billion people and 830 million internet users. An average person spends 3.25 hours on their phone daily and uses 24.7 apps.`,\n  punctuation: `Did you know? India gained independence in 1947! Our constitution states: \"We, the people of India, having solemnly resolved to constitute India into a sovereign, socialist, secular, democratic republic.\"`,\n  mixed: `In 2022, India celebrated its 75th Independence Day! The country has 28 states and 8 union territories, with a total population of 1.4 billion. Did you know that India's national bird is the peacock? Our national sport is hockey and the national flower is the lotus.`\n};\nconst TypingTest = () => {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [testDuration, setTestDuration] = useState(15);\n  const [textType, setTextType] = useState('words');\n  const [text, setText] = useState(paragraphs.words);\n  const [typed, setTyped] = useState('');\n  const [timeLeft, setTimeLeft] = useState(null); // null means not started\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestComplete, setIsTestComplete] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [errors, setErrors] = useState(0);\n  const [charTimes, setCharTimes] = useState([]);\n  const [errorWords, setErrorWords] = useState([]);\n  const inputRef = useRef(null);\n  const timerRef = useRef(null);\n\n  // Load text based on selected type\n  useEffect(() => {\n    setText(paragraphs[textType]);\n  }, [textType]);\n\n  // Start/reset the test\n  const startTest = () => {\n    setTyped('');\n    setTimeLeft(testDuration);\n    setIsTestActive(true);\n    setIsTestComplete(false);\n    setStartTime(Date.now());\n    setWpm(0);\n    setAccuracy(0);\n    setErrors(0);\n    setCharTimes([]);\n    setErrorWords([]);\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n\n    // Clear any existing timers\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n\n    // Start timer\n    timerRef.current = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timerRef.current);\n          endTest();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  // End the test\n  const endTest = () => {\n    setIsTestActive(false);\n    setIsTestComplete(true);\n\n    // Calculate final WPM, accuracy and collect error words\n    calculateResults();\n\n    // Save results if user is logged in\n    if (user) {\n      saveResults();\n    }\n  };\n\n  // Calculate WPM, accuracy and errors\n  const calculateResults = () => {\n    const elapsedMinutes = (Date.now() - startTime) / 60000;\n    const wordsTyped = typed.trim().split(' ').length;\n    const typedWpm = Math.round(wordsTyped / elapsedMinutes);\n\n    // Calculate accuracy by comparing characters\n    let correctChars = 0;\n    let incorrectChars = 0;\n    const typedChars = typed.split('');\n    const originalChars = text.split('');\n    typedChars.forEach((char, index) => {\n      if (originalChars[index] === char) {\n        correctChars++;\n      } else {\n        incorrectChars++;\n      }\n    });\n    const totalChars = typedChars.length;\n    const accuracyPercent = Math.round(correctChars / totalChars * 100) || 0;\n\n    // Find error words\n    const originalWords = text.split(' ');\n    const typedWords = typed.split(' ');\n    const errorWordsArray = [];\n    typedWords.forEach((word, index) => {\n      if (originalWords[index] && originalWords[index] !== word) {\n        errorWordsArray.push(originalWords[index]);\n      }\n    });\n    setWpm(typedWpm);\n    setAccuracy(accuracyPercent);\n    setErrors(incorrectChars);\n    setErrorWords(errorWordsArray);\n  };\n\n  // Save test results to backend\n  const saveResults = async () => {\n    try {\n      const sessionData = {\n        duration: testDuration,\n        wpm,\n        accuracy,\n        totalErrors: errors,\n        errorWords,\n        typingDurations: charTimes,\n        textType,\n        rawText: text,\n        typedText: typed\n      };\n      await axios.post('/api/sessions', sessionData);\n    } catch (error) {\n      console.error('Error saving results:', error);\n    }\n  };\n\n  // Handle typing in the input field\n  const handleType = e => {\n    if (!isTestActive) return;\n    const currentInput = e.target.value;\n    setTyped(currentInput);\n\n    // Record time for each keystroke\n    setCharTimes(prev => [...prev, Date.now() - startTime]);\n\n    // If user typed all the text, end the test\n    if (currentInput.length >= text.length) {\n      endTest();\n    }\n  };\n\n  // Render different character classes based on typing progress\n  const renderText = () => {\n    const characters = text.split('');\n    const typedChars = typed.split('');\n    return characters.map((char, index) => {\n      let className = '';\n      if (index < typedChars.length) {\n        className = typedChars[index] === char ? 'correct' : 'incorrect';\n      } else if (index === typedChars.length) {\n        className = 'current';\n      }\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: className,\n        children: char\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // Render results after test completion\n  const renderResults = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Typing Test Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            children: wpm\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Words Per Minute\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            children: [accuracy, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Accuracy\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"stat\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-value\",\n            children: errors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stat-label\",\n            children: \"Errors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), errorWords.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-words\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Error Words\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word-list\",\n          children: errorWords.map((word, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error-word\",\n            children: word\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startTest,\n        className: \"btn\",\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"typing-test\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"test-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"duration-selector\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: testDuration === 15 ? 'selected' : '',\n          onClick: () => setTestDuration(15),\n          disabled: isTestActive,\n          children: \"15 seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: testDuration === 30 ? 'selected' : '',\n          onClick: () => setTestDuration(30),\n          disabled: isTestActive,\n          children: \"30 seconds\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-type-selector\",\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          value: textType,\n          onChange: e => setTextType(e.target.value),\n          disabled: isTestActive,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"words\",\n            children: \"Words\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"numbers\",\n            children: \"Numbers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"punctuation\",\n            children: \"Punctuation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mixed\",\n            children: \"Mixed\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), timeLeft !== null && !isTestComplete && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: [timeLeft, \" seconds remaining\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }, this), !isTestActive && !isTestComplete && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startTest,\n      className: \"btn start-btn\",\n      children: \"Start Typing Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }, this), isTestActive && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-display\",\n        children: renderText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        className: \"typing-input\",\n        value: typed,\n        onChange: handleType,\n        placeholder: \"Type here...\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), isTestComplete && renderResults()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingTest, \"ULilyItOEl0VIeIq7mq0PJuUzCM=\");\n_c = TypingTest;\nexport default TypingTest;\nvar _c;\n$RefreshReg$(_c, \"TypingTest\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useContext","axios","AuthContext","jsxDEV","_jsxDEV","Fragment","_Fragment","paragraphs","words","numbers","punctuation","mixed","TypingTest","_s","user","testDuration","setTestDuration","textType","setTextType","text","setText","typed","setTyped","timeLeft","setTimeLeft","isTestActive","setIsTestActive","isTestComplete","setIsTestComplete","startTime","setStartTime","wpm","setWpm","accuracy","setAccuracy","errors","setErrors","charTimes","setCharTimes","errorWords","setErrorWords","inputRef","timerRef","startTest","Date","now","current","focus","clearInterval","setInterval","prev","endTest","calculateResults","saveResults","elapsedMinutes","wordsTyped","trim","split","length","typedWpm","Math","round","correctChars","incorrectChars","typedChars","originalChars","forEach","char","index","totalChars","accuracyPercent","originalWords","typedWords","errorWordsArray","word","push","sessionData","duration","totalErrors","typingDurations","rawText","typedText","post","error","console","handleType","e","currentInput","target","value","renderText","characters","map","className","children","fileName","_jsxFileName","lineNumber","columnNumber","renderResults","onClick","disabled","onChange","ref","type","placeholder","autoFocus","_c","$RefreshReg$"],"sources":["/Users/krunal/Desktop/crio project/Fullstack/monkey-type/client/src/components/TypingTest.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from 'react';\nimport axios from 'axios';\nimport { AuthContext } from '../context/AuthContext';\n\n// Sample paragraphs for testing\nconst paragraphs = {\n  words: `Once upon a time, there was a little child who went to school every day. He loved his parents very much and always enjoyed playing with his friends. He also liked reading books and wanted to become a scientist when he grew up.`,\n  numbers: `In 2023, there were 5.9 billion mobile phone users worldwide. India has 1.4 billion people and 830 million internet users. An average person spends 3.25 hours on their phone daily and uses 24.7 apps.`,\n  punctuation: `Did you know? India gained independence in 1947! Our constitution states: \"We, the people of India, having solemnly resolved to constitute India into a sovereign, socialist, secular, democratic republic.\"`,\n  mixed: `In 2022, India celebrated its 75th Independence Day! The country has 28 states and 8 union territories, with a total population of 1.4 billion. Did you know that India's national bird is the peacock? Our national sport is hockey and the national flower is the lotus.`\n};\n\nconst TypingTest = () => {\n  const { user } = useContext(AuthContext);\n  const [testDuration, setTestDuration] = useState(15);\n  const [textType, setTextType] = useState('words');\n  const [text, setText] = useState(paragraphs.words);\n  const [typed, setTyped] = useState('');\n  const [timeLeft, setTimeLeft] = useState(null); // null means not started\n  const [isTestActive, setIsTestActive] = useState(false);\n  const [isTestComplete, setIsTestComplete] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const [wpm, setWpm] = useState(0);\n  const [accuracy, setAccuracy] = useState(0);\n  const [errors, setErrors] = useState(0);\n  const [charTimes, setCharTimes] = useState([]);\n  const [errorWords, setErrorWords] = useState([]);\n  \n  const inputRef = useRef(null);\n  const timerRef = useRef(null);\n  \n  // Load text based on selected type\n  useEffect(() => {\n    setText(paragraphs[textType]);\n  }, [textType]);\n  \n  // Start/reset the test\n  const startTest = () => {\n    setTyped('');\n    setTimeLeft(testDuration);\n    setIsTestActive(true);\n    setIsTestComplete(false);\n    setStartTime(Date.now());\n    setWpm(0);\n    setAccuracy(0);\n    setErrors(0);\n    setCharTimes([]);\n    setErrorWords([]);\n    \n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n    \n    // Clear any existing timers\n    if (timerRef.current) {\n      clearInterval(timerRef.current);\n    }\n    \n    // Start timer\n    timerRef.current = setInterval(() => {\n      setTimeLeft(prev => {\n        if (prev <= 1) {\n          clearInterval(timerRef.current);\n          endTest();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  \n  // End the test\n  const endTest = () => {\n    setIsTestActive(false);\n    setIsTestComplete(true);\n    \n    // Calculate final WPM, accuracy and collect error words\n    calculateResults();\n    \n    // Save results if user is logged in\n    if (user) {\n      saveResults();\n    }\n  };\n  \n  // Calculate WPM, accuracy and errors\n  const calculateResults = () => {\n    const elapsedMinutes = (Date.now() - startTime) / 60000;\n    const wordsTyped = typed.trim().split(' ').length;\n    const typedWpm = Math.round(wordsTyped / elapsedMinutes);\n    \n    // Calculate accuracy by comparing characters\n    let correctChars = 0;\n    let incorrectChars = 0;\n    const typedChars = typed.split('');\n    const originalChars = text.split('');\n    \n    typedChars.forEach((char, index) => {\n      if (originalChars[index] === char) {\n        correctChars++;\n      } else {\n        incorrectChars++;\n      }\n    });\n    \n    const totalChars = typedChars.length;\n    const accuracyPercent = Math.round((correctChars / totalChars) * 100) || 0;\n    \n    // Find error words\n    const originalWords = text.split(' ');\n    const typedWords = typed.split(' ');\n    const errorWordsArray = [];\n    \n    typedWords.forEach((word, index) => {\n      if (originalWords[index] && originalWords[index] !== word) {\n        errorWordsArray.push(originalWords[index]);\n      }\n    });\n    \n    setWpm(typedWpm);\n    setAccuracy(accuracyPercent);\n    setErrors(incorrectChars);\n    setErrorWords(errorWordsArray);\n  };\n  \n  // Save test results to backend\n  const saveResults = async () => {\n    try {\n      const sessionData = {\n        duration: testDuration,\n        wpm,\n        accuracy,\n        totalErrors: errors,\n        errorWords,\n        typingDurations: charTimes,\n        textType,\n        rawText: text,\n        typedText: typed\n      };\n      \n      await axios.post('/api/sessions', sessionData);\n    } catch (error) {\n      console.error('Error saving results:', error);\n    }\n  };\n  \n  // Handle typing in the input field\n  const handleType = (e) => {\n    if (!isTestActive) return;\n    \n    const currentInput = e.target.value;\n    setTyped(currentInput);\n    \n    // Record time for each keystroke\n    setCharTimes(prev => [...prev, Date.now() - startTime]);\n    \n    // If user typed all the text, end the test\n    if (currentInput.length >= text.length) {\n      endTest();\n    }\n  };\n  \n  // Render different character classes based on typing progress\n  const renderText = () => {\n    const characters = text.split('');\n    const typedChars = typed.split('');\n    \n    return characters.map((char, index) => {\n      let className = '';\n      \n      if (index < typedChars.length) {\n        className = typedChars[index] === char ? 'correct' : 'incorrect';\n      } else if (index === typedChars.length) {\n        className = 'current';\n      }\n      \n      return (\n        <span \n          key={index} \n          className={className}\n        >\n          {char}\n        </span>\n      );\n    });\n  };\n  \n  // Render results after test completion\n  const renderResults = () => {\n    return (\n      <div className=\"results\">\n        <h2>Typing Test Results</h2>\n        <div className=\"result-stats\">\n          <div className=\"stat\">\n            <div className=\"stat-value\">{wpm}</div>\n            <div className=\"stat-label\">Words Per Minute</div>\n          </div>\n          <div className=\"stat\">\n            <div className=\"stat-value\">{accuracy}%</div>\n            <div className=\"stat-label\">Accuracy</div>\n          </div>\n          <div className=\"stat\">\n            <div className=\"stat-value\">{errors}</div>\n            <div className=\"stat-label\">Errors</div>\n          </div>\n        </div>\n        \n        {errorWords.length > 0 && (\n          <div className=\"error-words\">\n            <h3>Your Error Words</h3>\n            <div className=\"word-list\">\n              {errorWords.map((word, index) => (\n                <span key={index} className=\"error-word\">{word}</span>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        <button onClick={startTest} className=\"btn\">\n          Try Again\n        </button>\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"typing-test\">\n      <div className=\"test-controls\">\n        <div className=\"duration-selector\">\n          <button \n            className={testDuration === 15 ? 'selected' : ''}\n            onClick={() => setTestDuration(15)}\n            disabled={isTestActive}\n          >\n            15 seconds\n          </button>\n          <button \n            className={testDuration === 30 ? 'selected' : ''}\n            onClick={() => setTestDuration(30)}\n            disabled={isTestActive}\n          >\n            30 seconds\n          </button>\n        </div>\n        \n        <div className=\"text-type-selector\">\n          <select \n            value={textType} \n            onChange={(e) => setTextType(e.target.value)}\n            disabled={isTestActive}\n          >\n            <option value=\"words\">Words</option>\n            <option value=\"numbers\">Numbers</option>\n            <option value=\"punctuation\">Punctuation</option>\n            <option value=\"mixed\">Mixed</option>\n          </select>\n        </div>\n      </div>\n      \n      {timeLeft !== null && !isTestComplete && (\n        <div className=\"timer\">\n          {timeLeft} seconds remaining\n        </div>\n      )}\n      \n      {!isTestActive && !isTestComplete && (\n        <button onClick={startTest} className=\"btn start-btn\">\n          Start Typing Test\n        </button>\n      )}\n      \n      {isTestActive && (\n        <>\n          <div className=\"text-display\">\n            {renderText()}\n          </div>\n          <input\n            ref={inputRef}\n            type=\"text\"\n            className=\"typing-input\"\n            value={typed}\n            onChange={handleType}\n            placeholder=\"Type here...\"\n            autoFocus\n          />\n        </>\n      )}\n      \n      {isTestComplete && renderResults()}\n    </div>\n  );\n};\n\nexport default TypingTest; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}